# -*- coding: utf-8 -*-
"""Teste2 - Trabalho Pratico I.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xLGS8qU4NF-aqgdiF9WHta7J-AIHgbe4
"""

#import libraries 
import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt

url='https://github.com/Diegojfsr/RNA_Trabalho_Pratico_I/blob/main/test.csv?raw=true'
test = pd.read_csv(url)
url='https://github.com/Diegojfsr/RNA_Trabalho_Pratico_I/blob/main/train.csv?raw=true'
train = pd.read_csv(url)

#recarregar o Dataframe substituido os valores que contenham "?", "!","-", "+" entre outros
#train = train({"?": np.nan, "!" : np.nan})
train = train.replace({np.nan:"?", np.nan:"-"})

display(train) # Exibe o Dataframe

print(train.info()) # Exibe Informações do Dataframe

### Trata a coluna que tenha numeros, mas que não estao sendo reconhecidos como valores numericos.
train["PassengerId"] = pd.to_numeric(train["PassengerId"], errors="coerce") # errors="coerce" //trata os valores que durante a conversao deram erro, deixando como vazios os espaços.

print(train.info()) # Exibe Informações do Dataframe

#OneHotEncoding

!pip install category_encoders

import category_encoders as ce

from category_encoders.one_hot import OneHotEncoder, OrdinalEncoder

#OrdinalEncoding

OderEnc = OrdinalEncoder(cols =['PassengerId','HomePlanet','CryoSleep','Cabin','Destination','Age','VIP','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck','Name','Transported'])  # A variavel OrderEnc recebe os dados convertidos de Destination // Converte a coluna Destination

OE = OderEnc.fit_transform(train) # Faz a junção da coluna convertida com as demais do Dataframe //mas descarta a conversao anterior

OE.head(20)

print(OE.info()) # Exibe Informações do Dataframe

#check NaN values (Not a Number)
OE.isna().sum()

#checking null values
OE.isnull().sum()

OE.shape  #Número de linhas e colunas

###--------------------------------------------------------------------
X = OE.drop(["Transported",] , axis = 1)
Y = OE["Transported"]

print(X.info()) # Exibe Informações do Dataframe

X.shape  #Número de linhas e colunas

#https://keras.io/api/  (Keras Documentation)

import tensorflow as tf 
import keras 
from keras.models import Sequential      #Sequencia entre as camadas: Entrada - Oculta - Saida
from keras.layers import Dense, Dropout  #Iremos utilizar camadas densa na rede neural (full-connection)

"""Testes"""

#criar a rede neural sequencial 
ann = Sequential()

#definir as camadas de entrada, oculta 
ann.add( Dense(units = 7, activation = 'relu', kernel_initializer = 'random_uniform', input_dim=13))  #primeira camada oculta (nr_neuronios_entradas + nr_neuronios_saida / 2) = (30+1 / 2 = 16);  
                                                                                                       #input_dim = 30  (número de neuronios da camada de entrada = features de X_train)
#definir a camada de saida
ann.add(Dense(units = 1, activation = 'sigmoid'))

#configurar parâmetros da rede 
ann.compile(optimizer = 'adam',             #optimizer -> calculo dos ajustes dos pesos (descida do gradiente), calculo do delta
            loss='binary_crossentropy',     #loss -> calculo ou tratamento do erro      (binary_crossentropy -> para problemas de classificação binária)
            metrics = ['binary_accuracy']   #metrics -> avaliar a metrica do modelo ->   accuracy para problema de classificação binária 
           )

#treinar a rede neural
ann.fit(X, Y, batch_size = 10, epochs = 50)

#Realizando o calculo do loss e da acuracia da rede 

result = ann.evaluate(X, Y)

#Realizando as predições no conjunto de treino 

Ypred = ann.predict(X)  #calcula o valor do veículo 
Ypred

resultado = pd.DataFrame()

resultado["Y"] = Y
resultado["Ypred"] = Ypred          #valores preditos para o conjunto de treinamento 
resultado.reset_index(inplace = True, drop=True)
resultado

Y.mean()

Ypred.mean()